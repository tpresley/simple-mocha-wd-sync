// Generated by CoffeeScript 1.7.1
var colors, wd, _,
  __slice = [].slice;

wd = require('wd-sync');

colors = require('colors');

_ = require('underscore');

if (process.env.REPORTER !== 'JSON-Stream' && process.env.REPORTER.indexOf('selenium-ui-mocha-reporter') === -1) {
  console.log("Base Test URL: ".blue + process.env.LOCATION.green);
}

module.exports = function(helpers) {
  var browser, commands, e, newTest, real_describe, real_describe_only, real_describe_skip, real_it, real_it_only, real_it_skip, wrapper;
  browser = null;
  wrapper = wd.wrap({
    "with": function() {
      return commands;
    }
  });
  real_describe = global.describe;
  real_describe_only = global.describe.only;
  real_describe_skip = global.describe.skip;
  real_it = global.it;
  real_it_only = global.it.only;
  real_it_skip = global.it.skip;
  global.describe = function() {
    var args, cb, name, testCount;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    cb = args.length === 1 ? args[0] : args[1];
    if (args.length === 2) {
      helpers = args[0];
    }
    testCount = 1;
    return real_describe.call(this, name, (function(_this) {
      return function() {
        var extendedTestName;
        extendedTestName = '';
        beforeEach(function(done) {
          var testName, _ref, _ref1;
          testName = (_ref = (_ref1 = this.currentTest) != null ? _ref1.title : void 0) != null ? _ref : '';
          extendedTestName = "" + name + ": " + testCount + " " + testName;
          if (process.send) {
            process.send({
              name: extendedTestName,
              status: 'starting'
            });
          }
          newTest(extendedTestName, helpers);
          testCount++;
          return done();
        });
        afterEach(function(done) {
          var currentTest;
          currentTest = this.currentTest;
          return (wrapper(function() {
            var e, e2;
            try {
              this.tag('end');
              this.printTags();
              try {
                this.sauceJobStatus(currentTest.state === 'passed' ? true : false);
              } catch (_error) {
                e2 = _error;
              }
              if (!this.dontQuit) {
                this.quit();
              }
              if (process.send) {
                process.send({
                  name: extendedTestName,
                  status: currentTest.state
                });
              }
            } catch (_error) {
              e = _error;
              if (process.send) {
                process.send({
                  name: extendedTestName,
                  status: 'error',
                  message: e.message
                });
              }
            }
            return setTimeout(done, 1000);
          }))();
        });
        after(function(done) {
          return setTimeout(done, 1000);
        });
        return cb.apply(_this);
      };
    })(this));
  };
  global.describe.only = function(name, cb) {
    return real_describe_only.call(this, name, cb);
  };
  global.describe.skip = function(name, cb) {
    return real_describe_skip.call(this, name, cb);
  };
  global.it = function(name, cb) {
    var that;
    that = this;
    return real_it.call(that, name, wrapper.call(that, cb));
  };
  global.it.only = function(name, cb) {
    return real_it_only.call(this, name, cb);
  };
  global.it.skip = function(name, cb) {
    return real_it_skip.call(this, name, cb);
  };
  global.normal = global["default"] = 1000;
  global.short = 500;
  global.long = 2000;
  global.extralong = 4000;
  global.superlong = 6000;
  commands = function(selector, maxWait, root) {
    var e, element;
    if (maxWait == null) {
      maxWait = global["default"];
    }
    if (root == null) {
      root = null;
    }
    if (!root) {
      if (this.elementById && !this.waitForElementById) {
        root = this;
      }
    }
    if (!root) {
      try {
        browser.waitForElementByCssSelector(selector, maxWait);
      } catch (_error) {
        e = _error;
        throw new Error("Unable to find element within " + maxWait + "ms: " + selector);
      }
    }
    try {
      element = (root || browser).elementByCssSelector(selector);
      element.find = commands;
      return element;
    } catch (_error) {
      e = _error;
      throw new Error("Error getting element reference: " + selector);
    }
  };
  commands.baseUrl = process.env.LOCATION;
  commands.x = function(xpath, maxWait, root) {
    var e, element;
    if (root == null) {
      root = null;
    }
    if (!root) {
      if (this.elementById && !this.waitForElementById) {
        root = this;
      }
    }
    if (!root) {
      try {
        browser.waitForElementByXPath(xpath, maxWait);
      } catch (_error) {
        e = _error;
        throw new Error("Unable to find element within " + maxWait + "ms: " + xpath);
      }
    }
    try {
      element = (root || browser).elementByXPath(xpath);
      element.find = commands;
      return element;
    } catch (_error) {
      e = _error;
      throw new Error("Error getting element reference: " + xpath);
    }
  };
  if (process.env.DATA) {
    try {
      commands.data = JSON.parse(process.env.DATA);
    } catch (_error) {
      e = _error;
      commands.data = process.env.DATA;
    }
  }
  commands.sleep = function(ms) {
    if (ms == null) {
      ms = global["default"];
    }
    return wd.sleep(ms);
  };
  return newTest = function(name, helpers, options) {
    var defaultOptions, extendedTestName, fnc, globalActions, helper, hlp, initTags, previousTag, tags, testEnvironmentOptions, _i, _len, _ref;
    if (options == null) {
      options = {};
    }
    defaultOptions = {
      name: name,
      browserName: (_ref = process.env.BROWSER) != null ? _ref : 'chrome'
    };
    if (process.env.PLATFORM) {
      defaultOptions.platform = process.env.PLATFORM;
    }
    if (process.env.BROWSER_VERSION) {
      defaultOptions.version = process.env.BROWSER_VERSION;
    }
    testEnvironmentOptions = _.extend(defaultOptions, options);
    if (~~process.env.HEADLESS) {
      browser = wd.headless().browser;
    } else {
      browser = wd.remote(process.env.SELENIUM).browser;
    }
    commands.browser = browser;
    extendedTestName = name;
    commands.start = function(url) {
      var testInit;
      initTags();
      testInit = _.extend({}, testEnvironmentOptions);
      browser.init(testInit);
      browser.get(url || process.env.LOCATION);
      if (process.send) {
        return process.send({
          name: extendedTestName,
          status: 'started'
        });
      }
    };
    tags = null;
    previousTag = null;
    initTags = function() {
      previousTag = 'start';
      return tags = {
        start: new Date(),
        total: 0
      };
    };
    commands.tag = function(name) {
      var previousTime;
      if (tags === null) {
        initTags();
      }
      previousTime = tags['total'];
      tags['total'] = ~~((new Date() - tags.start) / 1000);
      tags[name] = tags['total'] - previousTime;
      return previousTag = name;
    };
    commands.getTags = function() {
      return tags;
    };
    commands.printTags = function() {
      var out, tag, time;
      if (!~~process.env.SHOW_TAGS) {
        return;
      }
      out = '';
      for (tag in tags) {
        time = tags[tag];
        if (tag !== 'start') {
          out += " " + tag + ": " + time + " ";
        }
      }
      return console.error('TAGS: ' + out);
    };
    try {
      globalActions = require(process.env.APP_HOME + '/helpers/global');
    } catch (_error) {
      e = _error;
      globalActions = null;
    }
    if (globalActions) {
      for (name in globalActions) {
        fnc = globalActions[name];
        if (typeof fnc === 'function') {
          (function(name, fnc) {
            return commands[name] = function() {
              var argList, args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              try {
                return fnc.apply(commands, args);
              } catch (_error) {
                e = _error;
                argList = args.join(' ');
                throw new Error("Unable to " + name + ": " + argList);
              }
            };
          })(name, fnc);
        }
      }
    }
    if (helpers) {
      if (!_.isArray(helpers)) {
        helpers = [helpers];
      }
      for (_i = 0, _len = helpers.length; _i < _len; _i++) {
        helper = helpers[_i];
        if (!(typeof helper === 'string')) {
          continue;
        }
        try {
          hlp = require(process.env.APP_HOME + ("/helpers/" + helper));
        } catch (_error) {
          e = _error;
          hlp = null;
          console.log(("Helper " + helper + " not found").red);
        }
        if (hlp) {
          for (name in hlp) {
            fnc = hlp[name];
            if (typeof fnc === 'function') {
              (function(name, fnc) {
                return commands[name] = function() {
                  var argList, args;
                  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                  try {
                    return fnc.apply(commands, args);
                  } catch (_error) {
                    e = _error;
                    argList = args.join(' ');
                    throw new Error("Unable to " + name + ": " + argList);
                  }
                };
              })(name, fnc);
            }
          }
        }
      }
    }
    for (name in browser) {
      fnc = browser[name];
      if (typeof fnc === 'function' && name !== 'sleep') {
        (function(name, fnc) {
          if (name === 'get') {
            return commands.get = function(url) {
              var begginingSlash, trailingSlash;
              try {
                if (!/^http(s)?:\/\/.*/.test(url)) {
                  trailingSlash = /\/$/;
                  begginingSlash = /^\//;
                  if (trailingSlash.test(commands.baseUrl)) {
                    url = url.replace(begginingSlash, '');
                  } else {
                    if (!begginingSlash.test(url)) {
                      url = '/' + url;
                    }
                  }
                  url = commands.baseUrl + url;
                }
                return fnc.call(browser, url);
              } catch (_error) {
                e = _error;
                throw new Error("Unable to get URL: " + url);
              }
            };
          } else {
            return commands[name] = function() {
              var argList, args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              try {
                return fnc.apply(browser, args);
              } catch (_error) {
                e = _error;
                argList = args.join(' ');
                throw new Error("Unable to " + name + ": " + argList);
              }
            };
          }
        })(name, fnc);
      }
    }
    if (~~process.env.DEBUG) {
      browser.on('status', function(info) {
        return console.log(info.cyan);
      });
      browser.on('command', function(meth, path, data) {
        return console.log(meth.yellow, path.grey, data != null ? data : '');
      });
    }
    return null;
  };
};
